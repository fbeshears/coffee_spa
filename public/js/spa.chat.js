// Generated by CoffeeScript 1.6.3
(function() {
  var clearChat, configMap, configModule, handleResize, initModule, jqueryMap, onListchange, onLogin, onLogout, onSetchatee, onSubmitMsg, onTapList, onTapToggle, onUpdatechat, removeSlider, scrollChat, setJqueryMap, setPxSizes, setSliderPosition, stateMap, writeAlert, writeChat;

  configMap = {
    main_html: "<div class=\"spa-chat\">\n  <div class=\"spa-chat-head\">\n    <div class=\"spa-chat-head-toggle\">+</div>\n    <div class=\"spa-chat-head-title\">\n      Chat\n    </div>\n  </div>\n  <div class=\"spa-chat-closer\">x</div>\n  <div class=\"spa-chat-sizer\">\n    <div class=\"spa-chat-list\">\n        <div class=\"spa-chat-list-box\"></div>\n    </div>\n    <div class=\"spa-chat-msg\">\n      <div class=\"spa-chat-msg-log\"></div>\n      <div class=\"spa-chat-msg-in\">\n        <form class=\"spa-chat-msg-form\">\n          <input type=\"text\"/>\n          <input type=\"submit\" style=\"display:none\"/>\n          <div class=\"spa-chat-msg-send\">\n            send\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>",
    settable_map: {
      slider_open_time: true,
      slider_close_time: true,
      slider_opened_em: true,
      slider_closed_em: true,
      slider_opened_title: true,
      slider_closed_title: true,
      chat_model: true,
      people_model: true,
      set_chat_anchor: true
    },
    slider_open_time: 250,
    slider_close_time: 250,
    slider_opened_em: 18,
    slider_closed_em: 2,
    slider_opened_min_em: 10,
    window_height_min_em: 20,
    slider_opened_title: 'Tap to close',
    slider_closed_title: 'Tap to open',
    chat_model: null,
    people_model: null,
    set_chat_anchor: null
  };

  stateMap = {
    $append_target: null,
    position_type: 'closed',
    px_per_em: 0,
    slider_hidden_px: 0,
    slider_closed_px: 0,
    slider_opened_px: 0
  };

  jqueryMap = {};

  setJqueryMap = function() {
    var $append_target, $slider;
    $append_target = stateMap.$append_target;
    $slider = $append_target.find('.spa-chat');
    jqueryMap = {
      $slider: $slider,
      $head: $slider.find('.spa-chat-head'),
      $toggle: $slider.find('.spa-chat-head-toggle'),
      $title: $slider.find('.spa-chat-head-title'),
      $sizer: $slider.find('.spa-chat-sizer'),
      $list_box: $slider.find('.spa-chat-list-box'),
      $msg_log: $slider.find('.spa-chat-msg-log'),
      $msg_in: $slider.find('.spa-chat-msg-in'),
      $input: $slider.find('.spa-chat-msg-in input[type=text]'),
      $send: $slider.find('.spa-chat-msg-send'),
      $form: $slider.find('.spa-chat-msg-form'),
      $window: $(window)
    };
  };

  setPxSizes = function() {
    var opened_height_em, px_per_em, window_height_em;
    px_per_em = spa.util_b.getEmSize(jqueryMap.$slider.get(0));
    window_height_em = Math.floor((jqueryMap.$window.height() / px_per_em) + 0.5);
    if (window_height_em > configMap.window_height_min_em) {
      opened_height_em = configMap.slider_opened_em;
    } else {
      opened_height_em = configMap.slider_opened_min_em;
    }
    stateMap.px_per_em = px_per_em;
    stateMap.slider_closed_px = configMap.slider_closed_em * px_per_em;
    stateMap.slider_opened_px = opened_height_em * px_per_em;
    jqueryMap.$sizer.css({
      height: (opened_height_em - 2) * px_per_em
    });
  };

  setSliderPosition = function(position_type, callback) {
    var animate_time, do_animate, height_px, slider_title, toggle_text;
    if (position_type === 'opened' && configMap.people_model.get_user().get_is_anon()) {
      return false;
    }
    if (stateMap.position_type === position_type) {
      if (position_type === 'opened') {
        jqueryMap.$input.focus();
      }
      return true;
    }
    switch (position_type) {
      case 'opened':
        height_px = stateMap.slider_opened_px;
        animate_time = configMap.slider_open_time;
        slider_title = configMap.slider_opened_title;
        toggle_text = '=';
        jqueryMap.$input.focus();
        break;
      case 'hidden':
        height_px = 0;
        animate_time = configMap.slider_open_time;
        slider_title = '';
        toggle_text = '+';
        break;
      case 'closed':
        height_px = stateMap.slider_closed_px;
        animate_time = configMap.slider_close_time;
        slider_title = configMap.slider_closed_title;
        toggle_text = '+';
        break;
      default:
        return false;
    }
    do_animate = function() {
      jqueryMap.$toggle.prop('title', slider_title);
      jqueryMap.$toggle.text(toggle_text);
      stateMap.position_type = position_type;
      if (callback != null) {
        callback(jqueryMap.$slider);
      }
    };
    stateMap.position_type = '';
    jqueryMap.$slider.animate({
      height: height_px
    }, animate_time, do_animate);
    return true;
  };

  scrollChat = function() {
    var $msg_log, scrollTop;
    $msg_log = jqueryMap.$msg_log;
    scrollTop = $msg_log.prop('scrollHeight') - $msg_log.height();
    $msg_log.animate({
      scrollTop: scrollTop
    }, 150);
  };

  writeChat = function(person_name, text, is_user) {
    var div_body, msg_class;
    msg_class = is_user ? 'spa-chat-msg-log-me' : 'spa-chat-msg-log-msg';
    div_body = "" + (spa.util_b.encodeHtml(person_name)) + ": " + (spa.util_b.encodeHtml(text));
    jqueryMap.$msg_log.append("<div class='" + msg_class + "'> " + div_body + " </div>");
    scrollChat();
  };

  writeAlert = function(alert_text) {
    jqueryMap.$msg_log.append("<div class='spa-chat-msg-log-alert'>\n  " + (spa.util_b.encodeHtml(alert_text)) + "\n</div>");
    scrollChat();
  };

  clearChat = function() {
    jqueryMap.$msg_log.empty();
  };

  onTapToggle = function(event) {
    var set_chat_anchor;
    set_chat_anchor = configMap.set_chat_anchor;
    if (stateMap.position_type === 'opened') {
      set_chat_anchor('closed');
    } else if (stateMap.position_type === 'closed') {
      set_chat_anchor('opened');
    }
    return false;
  };

  onSubmitMsg = function(event) {
    var msg_text, remClass;
    msg_text = jqueryMap.$input.val();
    if (msg_text.trim() === '') {
      return false;
    }
    configMap.chat_model.send_msg(msg_text);
    jqueryMap.$input.focus();
    jqueryMap.$send.addClass('spa-x-select');
    remClass = function() {
      jqueryMap.$send.removeClass('spa-x-select');
    };
    setTimeout(remClass, 250);
    return false;
  };

  onTapList = function(event) {
    var $tapped, chatee_id;
    $tapped = $(event.elem_target);
    if (!$tapped.hasClass('spa-chat-list-name')) {
      return false;
    }
    chatee_id = $tapped.attr('data-id');
    if (!chatee_id) {
      return false;
    }
    configMap.chat_model.set_chatee(chatee_id);
    return false;
  };

  onSetchatee = function(event, arg_map) {
    var new_chatee, old_chatee;
    new_chatee = arg_map.new_chatee;
    old_chatee = arg_map.old_chatee;
    jqueryMap.$input.focus();
    if (!new_chatee) {
      if (old_chatee) {
        writeAlert(old_chatee.name + ' has left the chat');
      } else {
        writeAlert('Your friend has left the chat');
      }
      jqueryMap.$title.text('Chat');
      return false;
    }
    jqueryMap.$list_box.find('.spa-chat-list-name').removeClass('spa-x-select').end().find("[data-id=" + arg_map.new_chatee.id + "]").addClass('spa-x-select');
    writeAlert('Now chatting with ' + arg_map.new_chatee.name);
    jqueryMap.$title.text('Chat with ' + arg_map.new_chatee.name);
    return true;
  };

  onListchange = function(event) {
    var chatee, do_person, list_html, people_db;
    list_html = String();
    people_db = configMap.people_model.get_db();
    chatee = configMap.chat_model.get_chatee();
    do_person = function(person, idx) {
      var select_class;
      if (person.get_is_anon() || person.get_is_user()) {
        return true;
      }
      if (chatee && chatee.id === person.id) {
        select_class = 'spa-chat-list-name spa-x-select';
      } else {
        select_class = 'spa-chat-list-name';
      }
      list_html += "<div class='" + select_class + "' data-id='" + person.id + "'>\n  " + (spa.util_b.encodeHtml(person.name)) + "\n</div>";
    };
    people_db().each(do_person);
    if (!list_html) {
      list_html = "<div class='spa-chat-list-note'>\n  To chat alone is the fate of all great souls...<br><br>\n  No one is online\n</div>";
      clearChat();
    }
    jqueryMap.$list_box.html(list_html);
  };

  onUpdatechat = function(event, msg_map) {
    var chatee, is_user, msg_text, sender, sender_id;
    sender_id = msg_map.sender_id;
    msg_text = msg_map.msg_text;
    chatee = configMap.chat_model.get_chatee() || {};
    sender = configMap.people_model.get_by_cid(sender_id);
    if (!sender) {
      writeAlert(msg_text);
      return false;
    }
    is_user = sender.get_is_user();
    if (!(is_user || sender_id === chatee.id)) {
      configMap.chat_model.set_chatee(sender_id);
    }
    writeChat(sender.name, msg_text, is_user);
    if (is_user) {
      jqueryMap.$input.val('');
      jqueryMap.$input.focus();
    }
  };

  onLogin = function(event, login_user) {
    configMap.set_chat_anchor('opened');
  };

  onLogout = function(event, logout_user) {
    configMap.set_chat_anchor('closed');
    jqueryMap.$title.text('Chat');
    clearChat();
  };

  configModule = function(input_map) {
    spa.util.setConfigMap({
      input_map: input_map,
      settable_map: configMap.settable_map,
      config_map: configMap
    });
    return true;
  };

  initModule = function($append_target) {
    var $list_box;
    stateMap.$append_target = $append_target;
    $append_target.append(configMap.main_html);
    setJqueryMap();
    setPxSizes();
    jqueryMap.$toggle.prop('title', configMap.slider_closed_title);
    stateMap.position_type = 'closed';
    $list_box = jqueryMap.$list_box;
    $.gevent.subscribe($list_box, 'spa-listchange', onListchange);
    $.gevent.subscribe($list_box, 'spa-setchatee', onSetchatee);
    $.gevent.subscribe($list_box, 'spa-updatechat', onUpdatechat);
    $.gevent.subscribe($list_box, 'spa-login', onLogin);
    $.gevent.subscribe($list_box, 'spa-logout', onLogout);
    jqueryMap.$head.bind('utap', onTapToggle);
    jqueryMap.$list_box.bind('utap', onTapList);
    jqueryMap.$send.bind('utap', onSubmitMsg);
    jqueryMap.$form.bind('submit', onSubmitMsg);
    return true;
  };

  removeSlider = function() {
    if (jqueryMap.$slider) {
      jqueryMap.$slider.remove();
      jqueryMap = {};
    }
    stateMap.$append_target = null;
    stateMap.position_type = 'closed';
    configMap.chat_model = null;
    configMap.people_model = null;
    configMap.set_chat_anchor = null;
    return true;
  };

  handleResize = function() {
    if (jqueryMap.$slider == null) {
      return false;
    }
    setPxSizes();
    if (stateMap.position_type === 'opened') {
      jqueryMap.$slider.css({
        height: stateMap.slider_opened_px
      });
    }
    return true;
  };

  if (this.spa == null) {
    this.spa = {};
  }

  this.spa.chat = {
    setSliderPosition: setSliderPosition,
    configModule: configModule,
    initModule: initModule,
    removeSlider: removeSlider,
    handleResize: handleResize
  };

}).call(this);
