// Generated by CoffeeScript 1.6.3
/*
spa.fake.coffee
Avatar feature module
*/


(function() {
  var fakeIdSerial, makeFakeId, mockSio, peopleList;

  fakeIdSerial = 5;

  makeFakeId = function() {
    return 'id_' + String(fakeIdSerial++);
  };

  peopleList = [
    {
      name: 'Betty',
      _id: 'id_01',
      css_map: {
        top: 20,
        left: 20,
        'background-color': 'rgb( 128, 128, 128)'
      }
    }, {
      name: 'Mike',
      _id: 'id_02',
      css_map: {
        top: 60,
        left: 20,
        'background-color': 'rgb( 128, 255, 128)'
      }
    }, {
      name: 'Pebbles',
      _id: 'id_03',
      css_map: {
        top: 100,
        left: 20,
        'background-color': 'rgb( 128, 192, 192)'
      }
    }, {
      name: 'Wilma',
      _id: 'id_04',
      css_map: {
        top: 140,
        left: 20,
        'background-color': 'rgb( 192, 128, 128)'
      }
    }
  ];

  mockSio = (function() {
    var callback_map, emit_mock_msg, emit_sio, listchange_idto, on_sio, send_listchange;
    listchange_idto = void 0;
    callback_map = {};
    on_sio = function(msg_type, callback) {
      callback_map[msg_type] = callback;
    };
    emit_sio = function(msg_type, data) {
      var do_adduser, do_updatechat, person, _i, _len;
      do_adduser = function() {
        var person_map;
        person_map = {
          _id: makeFakeId(),
          name: data.name,
          css_map: data.css_map
        };
        peopleList.push(person_map);
        callback_map.userupdate([person_map]);
      };
      do_updatechat = function() {
        var person_map, user;
        user = spa.model.people.get_user();
        person_map = {
          dest_id: user.id,
          dest_name: user.name,
          sender_id: data.dest_id,
          msg_text: 'Thanks for the note, ' + user.name
        };
        return callback_map.updatechat([person_map]);
      };
      if (msg_type === 'adduser' && callback_map.userupdate) {
        setTimeout(do_adduser, 3000);
      } else if (msg_type === 'updatechat' && callback_map.updatechat) {
        setTimeout(do_updatechat, 2000);
      } else if (msg_type === 'leavechat') {
        delete callback_map.listchange;
        delete callback_map.updatechat;
        if (listchange_idto) {
          clearTimeout(listchange_idto);
          listchange_idto = void 0;
        }
        send_listchange();
      } else if (msg_type === 'updateavatar' && callback_map.listchange) {
        for (_i = 0, _len = peopleList.length; _i < _len; _i++) {
          person = peopleList[_i];
          if (person._id === data.person_id) {
            person.css_map = data.css_map;
            break;
          }
        }
        callback_map.listchange([peopleList]);
      }
    };
    emit_mock_msg = function() {
      var do_updatechat;
      do_updatechat = function() {
        var person_map, user;
        if (!callback_map.updatechat) {
          emit_mock_msg();
        } else {
          user = spa.model.people.get_user();
          person_map = {
            dest_id: user.id,
            dest_name: user.name,
            sender_id: 'id_04',
            msg_text: 'Hi there ' + user.name + '!  Wilma here.'
          };
          callback_map.updatechat([person_map]);
        }
      };
      setTimeout(do_updatechat, 8000);
    };
    send_listchange = function() {
      listchange_idto = setTimeout(function() {
        if (callback_map.listchange) {
          callback_map.listchange([peopleList]);
          emit_mock_msg();
          listchange_idto = void 0;
        } else {
          send_listchange();
        }
      }, 1000);
    };
    send_listchange();
    return {
      emit: emit_sio,
      on: on_sio
    };
  })();

  if (this.spa == null) {
    this.spa = {};
  }

  this.spa.fake = {
    mockSio: mockSio
  };

}).call(this);
