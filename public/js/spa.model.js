// Generated by CoffeeScript 1.6.3
/*
spa.model.coffee
*/


(function() {
  var Person, chat, clearPeopleDb, completeLogin, configMap, initModule, isFakeData, makeCid, makePerson, people, removePerson, stateMap;

  configMap = {
    anon_id: 'a0'
  };

  stateMap = {
    anon_user: null,
    cid_serial: 0,
    is_connected: false,
    people_cid_map: {},
    people_db: TAFFY(),
    user: null
  };

  isFakeData = false;

  makeCid = function() {
    return 'c' + String(stateMap.cid_serial++);
  };

  clearPeopleDb = function() {
    var user;
    user = stateMap.user;
    stateMap.people_db = TAFFY();
    stateMap.people_cid_map = {};
    if (user) {
      stateMap.people_db.insert(user);
      stateMap.people_cid_map[user.cid] = user;
    }
  };

  completeLogin = function(user_list) {
    var user_map;
    user_map = user_list[0];
    delete stateMap.people_cid_map[user_map.cid];
    stateMap.user.cid = user_map._id;
    stateMap.user.id = user_map._id;
    stateMap.user.css_map = user_map.css_map;
    stateMap.people_cid_map[user_map._id] = stateMap.user;
    chat.join();
    $.gevent.publish('spa-login', [stateMap.user]);
  };

  Person = (function() {
    function Person(person_map) {
      this.cid = person_map.cid;
      this.css_map = person_map.css_map;
      this.name = person_map.name;
      if (person_map.id != null) {
        this.id = person_map.id;
      }
      if (this.cid === void 0 || !this.name) {
        throw new Error('client id and name required');
      }
    }

    Person.prototype.get_is_user = function() {
      return this.cid === stateMap.user.cid;
    };

    Person.prototype.get_is_anon = function() {
      return this.cid === stateMap.anon_user.cid;
    };

    return Person;

  })();

  makePerson = function(person_map) {
    var person;
    person = new Person(person_map);
    stateMap.people_cid_map[person.cid] = person;
    stateMap.people_db.insert(person);
    return person;
  };

  removePerson = function(person) {
    if (!person) {
      return false;
    }
    if (person.id === configMap.anon_id) {
      return false;
    }
    stateMap.people_db({
      cid: person.cid
    }).remove();
    if (person.cid != null) {
      delete stateMap.people_cid_map[person.cid];
    }
    return true;
  };

  people = {
    get_db: function() {
      return stateMap.people_db;
    },
    get_by_cid: function(cid) {
      return stateMap.people_cid_map[cid];
    },
    get_user: function() {
      return stateMap.user;
    },
    login: function(name) {
      var sio;
      sio = isFakeData ? spa.fake.mockSio : spa.data.getSio();
      stateMap.user = makePerson({
        cid: makeCid(),
        css_map: {
          top: 25,
          left: 25,
          'background-color': '#8f8'
        },
        name: name
      });
      sio.on('userupdate', completeLogin);
      sio.emit('adduser', {
        cid: stateMap.user.cid,
        css_map: stateMap.user.css_map,
        name: stateMap.user.name
      });
    },
    logout: function() {
      var user;
      user = stateMap.user;
      chat._leave();
      stateMap.user = stateMap.anon_user;
      clearPeopleDb();
      $.gevent.publish('spa-logout', [user]);
    }
  };

  chat = (function() {
    var chatee, get_chatee, join_chat, send_msg, set_chatee, update_avatar, _leave_chat, _publish_listchange, _publish_updatechat, _update_list;
    chatee = null;
    _update_list = function(arg_list) {
      var do_updates, is_chatee_online, people_list, person_map, _i, _len;
      people_list = arg_list[0];
      is_chatee_online = false;
      do_updates = function(person_map) {
        var make_person_map, person;
        if (stateMap.user && stateMap.user.id === person_map._id) {
          stateMap.user.css_map = person_map.css_map;
        } else {
          make_person_map = {
            cid: person_map._id,
            css_map: person_map.css_map,
            id: person_map._id,
            name: person_map.name
          };
          person = makePerson(make_person_map);
          if (chatee && chatee.id === make_person_map.id) {
            is_chatee_online = true;
            chatee = person;
          }
        }
      };
      clearPeopleDb();
      for (_i = 0, _len = people_list.length; _i < _len; _i++) {
        person_map = people_list[_i];
        if (person_map.name) {
          do_updates(person_map);
        }
      }
      stateMap.people_db.sort('name');
      if (chatee && !is_chatee_online) {
        set_chatee('');
      }
    };
    _publish_listchange = function(arg_list) {
      _update_list(arg_list);
      $.gevent.publish('spa-listchange', [arg_list]);
    };
    _publish_updatechat = function(arg_list) {
      var msg_map;
      msg_map = arg_list[0];
      if (!chatee) {
        set_chatee(msg_map.sender_id);
      } else if (msg_map.sender_id !== stateMap.user.id && msg_map.sender_id !== chatee.id) {
        set_chatee(msg_map.sender_id);
      }
      $.gevent.publish('spa-updatechat', [msg_map]);
    };
    _leave_chat = function() {
      var sio;
      sio = isFakeData ? spa.fake.mockSio : spa.data.getSio();
      stateMap.is_connected = false;
      if (sio) {
        sio.emit('leavechat');
      }
    };
    get_chatee = function() {
      return chatee;
    };
    join_chat = function() {
      var sio;
      if (stateMap.is_connected) {
        return false;
      }
      if (stateMap.user.get_is_anon()) {
        console.warn('User must be defined before joining chat');
        return false;
      }
      sio = isFakeData ? spa.fake.mockSio : spa.data.getSio();
      sio.on('listchange', _publish_listchange);
      sio.on('updatechat', _publish_updatechat);
      stateMap.is_connected = true;
      return true;
    };
    send_msg = function(msg_text) {
      var msg_map, sio;
      sio = isFakeData ? spa.fake.mockSio : spa.data.getSio();
      if (!sio) {
        return false;
      }
      if (!(stateMap.user && chatee)) {
        return false;
      }
      msg_map = {
        dest_id: chatee.id,
        dest_name: chatee.name,
        sender_id: stateMap.user.id,
        msg_text: msg_text
      };
      _publish_updatechat([msg_map]);
      sio.emit('updatechat', msg_map);
      return true;
    };
    set_chatee = function(person_id) {
      var new_chatee;
      new_chatee = stateMap.people_cid_map[person_id];
      if (!new_chatee) {
        new_chatee = null;
      } else if (chatee && chatee.id === new_chatee.id) {
        return false;
      }
      $.gevent.publish('spa-setchatee', {
        old_chatee: chatee,
        new_chatee: new_chatee
      });
      chatee = new_chatee;
      return true;
    };
    update_avatar = function(avatar_update_map) {
      var sio;
      sio = isFakeData ? spa.fake.mockSio : spa.data.getSio();
      if (sio) {
        sio.emit('updateavatar', avatar_update_map);
      }
    };
    return {
      _leave: _leave_chat,
      get_chatee: get_chatee,
      join: join_chat,
      send_msg: send_msg,
      set_chatee: set_chatee,
      update_avatar: update_avatar
    };
  })();

  initModule = function() {
    stateMap.anon_user = makePerson({
      cid: configMap.anon_id,
      id: configMap.anon_id,
      name: 'anonymous'
    });
    stateMap.user = stateMap.anon_user;
  };

  if (this.spa == null) {
    this.spa = {};
  }

  this.spa.model = {
    initModule: initModule,
    chat: chat,
    people: people
  };

}).call(this);
